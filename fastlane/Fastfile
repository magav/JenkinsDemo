fastlane_version "2.66.2"

desc "Runs all the tests"
lane :test do |options|
    devicesString = options[:devices]
    deviceList = devicesString.split(",")

    scan(
        project: options[:projectFilename],
        workspace: options[:workspaceFilename],
        scheme: options[:scheme],
        devices: deviceList,
        clean: true,
        prelaunch_simulator: true,
        output_directory: options[:reportPath],
        output_types: "html,junit"
    )
end

desc "Run test coverage"
lane :coverage do |options|
    slather(
        proj: options[:projectFilename],
        workspace: options[:workspaceFilename],
        scheme: options[:scheme],
        input_format: "auto",
        source_directory: options[:sourcePath],
        output_directory: options[:reportPath],
        html: true,
        jenkins: true
    )
end

desc "Run SwiftLint analyze tool"
lane :swiftLint do
    swiftlint(
        mode: :lint,
        output_file: "#{options[:reportPath]}/result.xml",
        reporter: "checkstyle",
        config_file: options[:configFile],
        ignore_exit_status: true
    )
end

desc "Run Cloc analyze tool"
lane :cloc do
    cloc(
       exclude_dir: options[:excludeDirectories],
       output_directory: options[:reportPath],
       source_directory: options[:sourcePath]
    )
end

desc "Run building process"
lane :build do |options|
    provisioningProfilesString = options[:provisioningProfiles]
    profileValuePairStringList = provisioningProfilesString.split(",")
    provisioningProfiles = {}
    profileValuePairStringList.each do |profilePairString|
        profileValueList = profilePairString.split("=>")
        provisioningProfiles[profileValueList.first] = profileValueList.last
    end

    gym(
        project: options[:projectFilename],
        workspace: options[:workspaceFilename],
        configuration: options[:configuration],
        scheme: options[:scheme],
        clean: true,
        output_directory: options[:outputPath],
        output_name: options[:outputName],
        skip_profile_detection: true,
        export_xcargs: "-allowProvisioningUpdates",
        export_method: options[:exportMethod],
        export_options: {
            signingStyle: "manual",
            provisioningProfiles: provisioningProfiles
        }
    )
end
